2.Memoization: (Accepted)
In above recusrion, the same subproblems are solved again and again.
This is recomputaion and to avoid it store the results of subproblems which are already solved in dp array.
So when a problem needs to be solved, if it is already solved then directly return the anwswer stored in dp array instead of again computing it.
class Solution {
public:
    int findWays(int n, vector<int> &dp)
    {
        if (n <= 1) return 1;
        if (dp[n] != -1) return dp[n];//already solved subproblems
        return dp[n]=findWays(n - 1, dp) + findWays(n - 2, dp); //store the result of subproblem in dp array
    }
    int climbStairs(int n) {
        vector<int>dp(n+1,-1); //fill all values with -1
        return findWays(n,dp);
    }
};

Complexity
Time complexity: O(n)= Linear time complexity
Space complexity:O(n)+O(N)= extra space of size n(dp) and recursion depth n


*********************** other sol 

class Solution {
public:
    int climbStairs(int n) {
        if(n <= 2)
        {
            return n ;
        }
         vector<int>dp(n+1 , -1);
         dp[0] = 0 ; 
         dp[1] = 1 ;
         dp[2] = 2;
         for(int i =  3 ; i <= n ; i++){
             dp[i] = dp[i - 1] + dp[i - 2] ;
         }
         return dp[n] ;

    }
};
***************************************

--------------------------------------------------------------------------------------------------------------------------
3.Dynamic Programming: (Accepted)
The above approach requires recursive stack space.
To optimize that space, use bottom-up approach of TABULATION.
Start from base case and based on previous results gradually build the result.
class Solution {
public:
    int climbStairs(int n) {
         vector<int>dp(n+1,-1);
         dp[0]=1,dp[1]=1; //base cases
         for(int i=2;i<=n;++i){
             dp[i]=dp[i-1]+dp[i-2];
         }
        return dp[n];
    }
};
Complexity
Time complexity: O(n)= Linear time complexity
Space complexity:O(n) = Extra space of size n and no recusrion stack space used.
--------------------------------------------------------------------------------------------------------------------------
4. Space Optimzation of DP (OPTIMAL SOLUTION)
If we carefully observe above tabulation, we only need previous two values to fill current index rather than whole dp array.
So we just maintain only those two values in 2 variables and update them accordingly for subsequent iterations.
class Solution {
public:
    int climbStairs(int n) {
        int prev2=1,prev1=1; //initally at 0th and 1st index
        
        for(int i=2;i<=n;i++){
            int curr=prev1+prev2;
            prev2=prev1; //update pointers
            prev1=curr;
        }
        return prev1;
    }
};
