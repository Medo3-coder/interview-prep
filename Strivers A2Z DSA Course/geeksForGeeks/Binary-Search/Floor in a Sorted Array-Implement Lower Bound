***************************************************Solution 1: Linear Search***********************

Time Complexity:
O(n): Linear iteration through the array.



class Solution {
  public:

    int findFloor(vector<int>& arr, int k) {

         int floorIndex = -1;
         
         for(int i = 0 ; i < arr.size() ; i++)
         {
             if(arr[i] <= k){
                 
                 floorIndex = i ; // Update to the current index
             }else{
                 break ; // Stop when the current element is greater than k
             }
         }
         
         return floorIndex ;
    }
};



*****************************************Solution 2: Binary Search************************** 

class Solution {
  public:

    int findFloor(vector<int>& arr, int k) {
       
       int left = 0 ; 
       int right = arr.size() - 1 ;
       int floorIndex  = -1 ;
       
       while(left <= right){
           
           int mid = left + (right - left) / 2 ;
           
           if(arr[mid] <= k ){
               floorIndex = mid ;  // Mid could be the floor
               left = mid + 1 ;    // Move to the right to find a larger value
           }else{
               right = mid - 1 ;
           }
       }
       
        return floorIndex;
    }
};
