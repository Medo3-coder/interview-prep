#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class Node {
public: 
    int data ; 
    Node* next ;
    
    Node(int data1 , Node* next1){
        data = data1 ;
        next = next1 ;
    }
    
    Node(int data1){
         data = data1 ;
         next = NULL ;
    }
};

// Function to print the linked list
void printLinkedList(Node* head){
    while(head != NULL){
        cout<< head->data << " ";
        head = head->next ;
    }
}

// Function to delete the Nth node
// from the end of the linked list
Node* DeleteNthNodefromEnd(Node* head , int n){
    Node* start = new Node(0 , head);
    start->next = head ;
    Node* slow = start ; 
    Node* fast = start ;
    
    for(int i = 1 ; i <= n ; i++){
        fast = fast->next ;
    }
    
    while(fast->next != NULL){
        slow = slow->next ;
        fast = fast->next ;
    }
    
    // Delete the Nth node from the end
    Node* delNode = slow->next;
    slow->next = slow->next->next ; 
    delete delNode;
    
    
    Node* newHead = start->next;
    delete start; // Delete the dummy node
    return newHead;
}


int main() {
    vector<int> arr = {1 , 2 , 3 , 4 , 5};
    int N = 3;
    Node* head = new Node(arr[0]);
    head->next = new Node(arr[1]);
    head->next->next = new Node(arr[2]);
    head->next->next->next = new Node(arr[3]);
    head->next->next->next->next = new Node(arr[4]);
    // Delete the Nth node from the end 
    // and print the modified linked list
    
    head = DeleteNthNodefromEnd(head , N);
    printLinkedList(head);

  

    return 0;
}

Output: 1 2 4 5


Time Complexity: O(N) since the fast pointer will traverse the entire linked list, where N is the length of the linked list.

Space Complexity: O(1), as we have not used any extra space.
