// Online C++ compiler to run C++ program online
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    // Data stored in the node
       int data ;
       
    // pointer to the next node in the list
       Node* next; 
       
    // Constructor with both data and
    // next node as parameters
    Node(int data1 ,Node* next1)
    {
        data = data1 ;
        next = next1 ;
    }
    // Constructor with only data as a
    // parameter, sets next to nullptr
    
    Node(int data1)
    {
        data = data1;
        next = NULL;
    }
    
};

// Function to reverse a linked list
// using the 3-pointer approach

Node*  reverseLinkedList(Node* head)
{
    Node* prev = NULL ;
    Node* next;
    
    while(head != NULL)
    {
        next = head->next;
        head->next = prev ;
        prev = head; 
        head = next; 
        
    }
       return prev;  
}

// Function to print the linked list

void printLinkedList(Node* head)
{
    Node* temp = head;
    while(temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    
    // Create a linked list with
    // values 1, 3, 2, and 4
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(3);
    head->next->next->next = new Node(4);
    
    
    // Print the original linked list
     cout << "Original Linked List: ";
     printLinkedList(head);
     
     
    // Reverse the linked list
     cout << "Reversed Linked List: ";
     head = reverseLinkedList(head);
     
   // Print the reversed linked list
     cout << "Reversed Linked List: ";
     printLinkedList(head);
    

    return 0;
}



Original Linked List: 1 2 3 4 
Reversed Linked List: Reversed Linked List: 4 3 2 1 


=== Code Execution Successful ===

Time Complexity: O(N) The code traverses the entire linked list once, where 'n' is the number of nodes in the list. This traversal has a linear time complexity, O(n).

Space Complexity: O(1) The code uses only a constant amount of additional space, regardless of the linked list's length. This is achieved by using three pointers (prev, temp and front) to reverse the list without any significant extra memory usage, resulting in constant space complexity, O(1).
