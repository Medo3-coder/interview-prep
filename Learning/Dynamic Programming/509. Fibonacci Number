1 - Using Tabulation

Time complexity: O(n)
Space complexity: O(n)

class Solution {
public:
    int fib(int n) {
        if(n==0 || n==1) return n;
        vector<int> dp(n+1,-1);
        int dp[0]=0;
        int dp[1]=1;
        for(int i=2;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
};
-----------------------------------------------------------------
2 - Using Resursion

Time complexity: O(2^n)
Space complexity: O(2^n)

class Solution {
public:
    int fib(int n) {
        if(n<=1) return n;
        return fib(n-1)+fib(n-2);
    }
};
-----------------------------------------------------------------------------------------

3 - Using Memoization

Time complexity: O(n)
Space complexity: O(n) + O(n)

class Solution {
public:

int memo(int n , vector<int>&dp)
{
     if(n <= 1) return n ;
     if(dp[n] != 0) return dp[n];
     return dp[n] = memo(n - 1, dp) + memo(n - 2 , dp);
}
    int fib(int n) { 
    vector <int>dp(n + 1 , 0);
    return memo(n , dp);
    }
};
