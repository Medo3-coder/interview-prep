class Solution {
  public:
    // Function to return Breadth First Traversal of given graph.
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        
        int vis[V] = {0}; 
        vis[0] = 1 ; 
        queue<int> q ; 
         // push the initial starting node 
        q.push(0); 
        vector<int> bfs ;
        // iterate till the queue is empty
        while(!q.empty())
        {
            // get the topmost element in the queue 
            int node = q.front();
            q.pop();
            bfs.push_back(node);
          // traverse for all its neighbours 
           for(auto it : adj[node])
           {
               if(!vis[it])
               {
                  // if the neighbour has previously not been visited, 
                  // store in Q and mark as visited 
                  vis[it] = 1 ; 
                  q.push(it);
               }
           }
        }
        
        return bfs;
    }
};

Time Complexity: O(N) + O(2E), Where N = Nodes, 2E is for total degrees as we traverse all adjacent nodes.

Space Complexity: O(3N) ~ O(N), Space for queue data structure visited array and an adjacency list
