//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution{
    
private: 

    bool isSafe(int node , int color[] , bool graph[101][101] , int N , int colorToNode)
    {
        //travers for all adjacent nodes   
        // k != node self node (not node itself) 
        //graph[k][node] == 1   (is adjacent node)
        //color[k] = colorToNode // adjacent k have same color i want to do 
        
        for(int k = 0 ; k < N ; k++)
        {
            if(k != node && graph[k][node] == 1 && color[k] == colorToNode)
            {
                return false; 
            }
        }
        
        return true ; // it safe to color that node 
    }
    bool solve(int node , int color[] , int m , int N , bool graph[101][101])
    {
        if(node == N) return true ;
        
        // try every color 
        for(int i = 1 ; i <= m ; i++)
        {
            if(isSafe(node , color, graph , N , i))
            {
                color[node] = i ;
                if(solve(node + 1 , color , m , N , graph)) return true ;
                color[node] = 0 ;    //backtrack Step
            }
        }
        
        return false ; // not possbile to color any node  return false 
    }
public:
    // Function to determine if graph can be coloured with at most M colours such
    // that no two adjacent vertices of graph are coloured with same colour.
    bool graphColoring(bool graph[101][101], int m, int N) {
        
        int color[N] = {0};
        if(solve(0 , color , m , N , graph) == true) return true ;
        return false ;
    }
};


int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m, e;
        cin >> n >> m >> e;
        int i;
        bool graph[101][101];
        for (i = 0; i < n; i++) {
            memset(graph[i], 0, sizeof(graph[i]));
        }
        for (i = 0; i < e; i++) {
            int a, b;
            cin >> a >> b;
            graph[a - 1][b - 1] = 1;
            graph[b - 1][a - 1] = 1;
        }
        Solution ob;
        cout << ob.graphColoring(graph, m, n) << endl;
    }
    return 0;
}


Time Complexity: O( N^M) (n raised to m)   // i have n node and i try to color each of them 

Space Complexity: O(N)   // use color array to color the graph  

// https://takeuforward.org/data-structure/m-coloring-problem/
