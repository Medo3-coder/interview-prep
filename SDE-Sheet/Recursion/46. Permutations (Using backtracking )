class Solution {
private: 

 void permutation(int index , vector<int> &nums , vector<vector<int>> &answer)
 {
     //basc case 
     if(index == nums.size())
     {
         answer.push_back(nums);
         return; 
     }

     for(int i = index ; i < nums.size() ; i++)
     {
        swap(nums[index] , nums[i]);
        permutation( index + 1 , nums , answer);
        swap(nums[index] , nums[i]);
     }
 }

public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> answer ; 
        permutation( 0 , nums , answer);
        return answer ;
        
    }




int main() {
  Solution obj;
  vector < int > v {1,2,3};
  vector < vector < int >> sum = obj.permute(v);
  cout << "All Permutations are" << endl;
  for (int i = 0; i < sum.size(); i++) {
    for (int j = 0; j < sum[i].size(); j++)
      cout << sum[i][j] << " ";
    cout << endl;
  }
};

Time Complexity: O(N! X N)

Space Complexity: O(1)

//https://takeuforward.org/data-structure/print-all-permutations-of-a-string-array/
