class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
         solve(board);
    }
    bool solve(vector<vector<char>>& board )
    {
        for(int row = 0 ; row < board.size() ; row++)
        {
            for(int col = 0 ; col < board[0].size() ; col++)
            {
                if(board[row][col] == '.')
                {
                    for( char c = '1' ; c <= '9' ; c++)
                    {
                        if(isValid(board , row , col , c))
                        {
                            board[row][col] = c ;
                            if(solve(board) == true)
                                 return true ;
                            else
                                 board[row][col] = '.' ;   // Backtrack step
                        }
                           
                    }
                    return false ;
                }
            }
        }

        return true ;
    }

    bool isValid(vector<vector<char>>& board , int row , int col , char c)
    {
        for(int i = 0 ; i < 9 ; i++)
        {
            //check for entire col and row changes 
            if(board[i][col] == c)
                return false;

            //check for entire row and col changes 
            if(board[row][i] == c)
                return false; 

            if(board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c)
            {
                return false ;
            }
        }
        return true ;
    }
};


Time Complexity: O(9(n ^ 2)), in the worst case, for each cell in the n2 board, we have 9 possible numbers.

Space Complexity: O(1), since we are refilling the given board itself, there is no extra space required, so constant space complexity.
