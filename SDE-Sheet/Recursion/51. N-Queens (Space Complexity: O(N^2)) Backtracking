class Solution {

private:
bool isSafe1(int row , int col , vector<string> board , int n) 
{
    // check upper element
      int duprow = row;
      int dupcol = col;

    while(row >= 0 && col >= 0){
        if(board[row][col] == 'Q') return false ;
        row--;
        col--;
    }
    col = dupcol ;
    row = duprow ;
    while(col >= 0)
    {
       if(board[row][col] == 'Q') return false ;
       col--; 
    }

    row = duprow ;
    col = dupcol ;
    while(row < n && col >= 0)
    {
        if(board[row][col] == 'Q') return false ;
        row++ ;
        col--;
    }
    return true ;

}

public:

 void solve(int col , vector<string>&board , vector<vector<string>>&answer , int n)
 {
     if(col == n)
     {
         answer.push_back(board);
         return;
     }
     for(int row = 0 ; row < n ; row++)
     {
         if(isSafe1(row , col , board , n)){
             board[row][col] = 'Q';
             solve(col + 1 , board , answer , n);
             board[row][col] = '.';   //BackTrack step
         }
     }
 }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> answer ;
        //init a board with empty strings
        vector<string> board(n) ;
        string s(n , '.');
        for(int i = 0 ; i < n ; i++)
        {
            board[i] = s;
        }
        solve(0 ,board , answer , n); // col : 0
        return answer ;
        
    }
};


// Time Complexity: Exponential in nature, since we are trying out all ways. To be precise it goes as O

// (N! * N) nearly.

// Space Complexity: O(N^2)

//https://takeuforward.org/data-structure/n-queen-problem-return-all-distinct-solutions-to-the-n-queens-puzzle/
